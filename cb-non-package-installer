#!/usr/bin/env python3
# -*-python-*-

"""
Couchbase non root installer tool. This tool is used to install and upgrade non root install.

To do an install:

1. Create a folder to install into:
  mkdir couchbase-home
2. Execute the script providing the rpm package to install and the location to install to

  cb-non-package-installer --install --install-location couchbase-home \
  --package couchbase-server-enterprise-6.0.0-centos7.x86_64.rpm

To do an upgrade:

1. Execute the script providing the rpm package and the location that the previous version of Couchbase Server is
  installed at
   cb-non-package-installer --upgrade --install-location couchbase-home \
  --package couchbase-server-enterprise-6.5.0-centos7.x86_64.rpm

Copyright (c) 2020  Couchbase Inc
"""

import argparse
import logging
import re
import os
import subprocess
import sys

FNULL = open(os.devnull, 'w')
VERSION = (7, 0)


def error(message):
    """
    Logs the error and exits
    """
    logging.error(message)
    sys.exit(1)


def get_package_version(package):
    """
    Gets the Couchbase Version from the package name
    """
    package = os.path.basename(package)

    # Only support RPM base distros
    # couchbase-server-enterprise-5.5.4-MP1-centos7.x86_64.rpm
    # couchbase-server-enterprise-6.0.1-centos8.x86_64.rpm
    regex_package_version = re.compile(r'^couchbase-server-(enterprise|community)(-|_)'
                                       r'(?P<major>\d+)\.(?P<minor>\d+)\.(?P<maintenance>\d+)'
                                       r'-[0-9a-zA-Z_\-\.]+(rpm|deb)$')
    match = regex_package_version.match(package)
    if not match:
        error(f'Could not get version from Package name {package}')
    return int(match.group('major')), int(match.group('minor')), int(match.group('maintenance'))


def get_install_version(location):
    """
    Returns the install version of Couchbase Server
    """
    version_file = os.path.join(location, 'opt/couchbase/VERSION.txt')
    with open(version_file) as version_file_handle:
        version_string = version_file_handle.readline()
        # 5.5.4-4338
        # 6.0.2-5656
        regex_install_version = re.compile(r'^(?P<major>\d+)\.(?P<minor>\d+)\.'
                                           r'(?P<maintenance>\d+)-\d+$')
        match = regex_install_version.match(version_string)
        if not match:
            error(f'Could not get version from the installed Couchbase Server: {location}')
        return int(match.group('major')), int(match.group('minor')), int(match.group('maintenance'))


def unpack(package, location, package_type):
    """
    Unpacks the rpm package
    """
    old_cwd = os.getcwd()
    package = os.path.abspath(package)
    logging.debug(f'Unpacking {package}')
    os.chdir(location)
    if package_type =='rpm':
        return_code = subprocess.call(f'rpm2cpio {package} | cpio --extract --make-directories --no-absolute-filenames',
                                      stdout=FNULL, stderr=FNULL, shell=True)
    else:
        return_code = subprocess.call(['dpkg', '-x', package, '.'])

    if return_code != 0:
        error(f'Problems unpacking {package} to {location}')
    os.chdir('opt/couchbase')
    logging.debug('Executing reloc.sh')
    return_code = subprocess.call(['./bin/install/reloc.sh', os.getcwd()])
    if return_code != 0:
        error('Problems executing reloc.sh')
    os.chdir(old_cwd)


def install(package, location, package_type):
    """
    Does a fresh non package install of Couchbase Server
    """
    logging.info('Installing Couchbase Server')
    if get_package_version(package)[:2] > VERSION:
        error(f'Can only install up to version {VERSION[0]}.{VERSION[1]}.X')
    if os.listdir(location):
        error(f'Install location "{location}" is not empty, please provide an empty directory to install to')

    unpack(package, location, package_type)
    print('Successfully installed')


def check_upgrade_versions(package_version, install_version):
    """
    Checks the installed and the upgrade package versions
    """
    if package_version[:2] > VERSION:
        error(f'Can only upgrade up to version {VERSION[0]}.{VERSION[1]}.X')
    if package_version < install_version:
        error(f'Cannot upgrade installed package {".".join(install_version)} is newer than {package_version}')
    if install_version < (5, 0, 0):
        error(f'Upgrade only supported between versions 5.0.0 and {VERSION[0]},{VERSION[1]}.X')


def cbupgrade(location):
    """
    Executes cbupgrade
    """
    print('Running cbupgrade this could take some time')
    cbupgrade_cmd = os.path.join(location, 'opt/couchbase/bin/cbupgrade')
    config = os.path.join(location, 'opt/couchbase/var/lib/couchbase/config')
    return_code = subprocess.call([cbupgrade_cmd, '-a', 'yes', '--namespace_upgrade_only', '-c', config], stdout=FNULL)
    if return_code != 0:
        error('There was problem running cbupgrade')


def upgrade(package, location, package_type):
    """
    Upgrades a non package install of Couchbase Server
    """
    logging.info('Upgrading Couchbase Server')
    if not os.listdir(location):
        error(f'Upgrade location "{location}" is empty, please provide the location where Couchbase Server is '
              'installed')

    package_version = get_package_version(package)
    install_version = get_install_version(location)
    check_upgrade_versions(package_version, install_version)

    # Check if couchbase-server is running
    # grep rc is 1 if no thing is found, 2 is used for error
    return_code = subprocess.call(r'ps auxww | grep beam | grep "\-name babysitte[r]"',
                                  shell=True, stdout=FNULL)
    if return_code == 0:
        error('Couchbase Server is running please shutdown before upgrading')
    elif return_code == 2:
        error('Could not check if Couchbase Server was running')

    # Backup config
    logging.info('Backing up the config')
    backup_config = 'couchbase-server-backup-config'
    backup_config = os.path.abspath(backup_config)
    try:
        os.mkdir(backup_config)
    except OSError as e:
        error(f'Cannot create the directory {backup_config} to backup the config: {e}')
    config_files = ['opt/couchbase/etc/couchdb/local.ini',
                    'opt/couchbase/var/lib/couchbase/couchbase-server.node',
                    'opt/couchbase/var/lib/couchbase/config']

    # The ip file is only on the first node in the cluster
    files = {'opt/couchbase/var/lib/couchbase/ip': False, 'opt/couchbase/var/lib/couchbase/ip_start': False}
    for file_path in files:
        if os.path.exists(os.path.join(location, file_path)):
            files[file_path] = True
            config_files.append(file_path)

    config_files = [os.path.join(location, f) for f in config_files]

    return_code = subprocess.call(['cp', '-r'] + config_files + [backup_config])
    if return_code != 0:
        error(f'Problem backing up config to {backup_config}')

    # TODO: Get data paths
    # Remove old couchbase files
    logging.debug('Removing the old install')
    old_install = ['opt/couchbase/bin/', 'opt/couchbase/etc/', 'opt/couchbase/lib/',
                   'opt/couchbase/LICENSE.txt', 'opt/couchbase/manifest.xml',
                   'opt/couchbase/README.txt', 'opt/couchbase/samples', 'opt/couchbase/share',
                   'opt/couchbase/VARIANT.txt', 'opt/couchbase/VERSION.txt',
                   'opt/couchbase/var/lib/couchbase/couchbase-server.node',
                   'opt/couchbase/var/lib/couchbase/config',
                   'opt/couchbase/var/lib/couchbase/initargs',
                   'opt/couchbase/var/lib/couchbase/isasl.pw',
                   'opt/couchbase/var/lib/couchbase/localtoken']

    for file_path in files:
        if files[file_path]:
            old_install.append(file_path)

    old_install = [os.path.join(location, f) for f in old_install]

    return_code = subprocess.call(['rm', '-r'] + old_install)
    if return_code != 0:
        error('Problem removing the old install')

    unpack(package, location, package_type)
    # Restore config
    logging.info('Restoring the old config')
    for config_file in config_files:
        old_config = os.path.basename(config_file)
        if old_config == 'config':
            restore_config_command = f'cp {os.path.join(backup_config, old_config)}/* {config_file}'
        else:
            restore_config_command = f'cp {os.path.join(backup_config, old_config)} {config_file}'
        return_code = subprocess.call(restore_config_command, shell=True)
        if return_code != 0:
            error('Problem restoring old config')
    # Remove backup config
    return_codec = subprocess.call(['rm', '-r', backup_config])
    if return_codec != 0:
        error(f'Could not remove the backed up config directory {backup_config}')
    if package_version[:2] == VERSION:
        cbupgrade(location)
    print('Upgrade has completed successfully')
    sys.exit(0)


def which(command):
    logging.debug(f"Checking if command '{command}' is available")
    return_code = subprocess.call(['which', command], stdout=FNULL)
    return return_code == 0


def check_install_dependencies(package_type):
    """
    Check the dependencies needed to execute this script are available.
    """
    if package_type == 'rpm':
        commands = ['rpm2cpio', 'cpio', 'rpm', 'perl']
    else:
        commands = ['dpkg', 'perl']

    for command in commands:
        if not which(command):
            error(f'Cannot start the install as command "{command}" is not available')


def check_package_dependencies(package, package_type):
    """
    Check that the dependencies of Couchbase Server are available.
    """
    if package_type == 'rpm':
        check_rpm_dependencies(package)
    else:
        check_deb_dependencies(package)

def check_rpm_dependencies(package):
    """
    Check that the dependencies of Couchbase Server are available from a rpm package.
    """
    rpm_output = subprocess.check_output(['rpm', '-qpR', package], encoding='UTF-8')
    for line in rpm_output.splitlines():
        check_command = True
        for x in ['shadow-utils', 'rpmfind', 'rpmlib', 'pwdutils', 'config(', 'libc', 'findutils']:
            if line.startswith(x):
                check_command = False
                break
        command = line.split(' ')[0]
        if check_command and not which(command):
            error(f'Cannot install Couchbase Server missing dependency: "{command}"')


def check_deb_dependencies(package):
    """
    Check that the dependencies of Couchbase Server are available from a deb package.
    """
    dpkg_output = subprocess.check_output(['dpkg', '--info', package], encoding='UTF-8')
    for line in dpkg_output.splitlines():
        if line.startswith(' Depends:'):
            line = line[9:]
            for command in line.split(','):
                check_command = True
                for x in ["libc", "libtinfo", "init-system-helpers", "lsb-base", "libncurses", "libssl", "python-httplib2"]:
                    if command.strip().startswith(x):
                        check_command = False
                        break
                if check_command and not which(command.strip()):
                    error(f'Cannot install Couchbase Server missing dependency: "{command}"')


def main():
    """
    Validates the arguments and start the install or upgrade process
    """
    opts = argparse.ArgumentParser(description='A tool to help install and upgrade Couchbase Server'
                                               ' in non root environments.')

    action_group = opts.add_mutually_exclusive_group(required=True)
    action_group.add_argument('--install', action='store_true', dest='install',
                              help='To do a fresh install of Couchbase Server')
    action_group.add_argument('--upgrade', action='store_true', dest='upgrade',
                              help='To upgrade an existing install of Couchbase Server')
    opts.add_argument('--install-location', type=str, metavar='Path', dest='location',
                      required=True, help='Path where Couchbase Server should be installed')
    opts.add_argument('--package', type=str, metavar='File', dest='package', required=True,
                      help='The Couchbase Server package (rpm) to install')
    opts.add_argument('-v', '--verbose', action='count', help='increase output verbosity')
    args = opts.parse_args()

    log_level = None
    if args.verbose is None:
        log_level = logging.WARN
    elif args.verbose >= 2:
        log_level = logging.DEBUG
    elif args.verbose == 1:
        log_level = logging.INFO

    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                        datefmt='%Y/%m/%dT%H:%M:%S', level=log_level)

    if not os.path.isfile(args.package):
        error(f'Package "{args.package}" does not exist or is not a file')
    if not os.access(args.package, os.R_OK):
        error(f'Package "{args.package}" is not readable, please check the permissions')
    if not os.path.isdir(args.location):
        error(f'Install location "{args.location}" does not exist or is not a directory')
    if not os.access(args.location, os.W_OK):
        error(f'Install location "{args.location}" is not writable, please check the permissions')

    package_type = args.package.split('.')[-1]
    if package_type not in ['rpm', 'deb']:
        error(f'Package "{args.package}" not supported')

    check_install_dependencies(package_type)
    check_package_dependencies(args.package, package_type)

    if args.install:
        install(args.package, args.location, package_type)
    if args.upgrade:
        upgrade(args.package, args.location, package_type)
    sys.exit(0)


if __name__ == '__main__':
    main()
