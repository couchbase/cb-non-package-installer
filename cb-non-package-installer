#!/usr/bin/env python3
# -*-python-*-

"""
Couchbase non root installer tool. This tool is used to install and upgrade non root install.

To do an install:

1. Create a folder to install into:
  mkdir couchbase-home
2. Execute the script providing the rpm package to install and the location to install to

  cb-non-package-installer --install --install-location couchbase-home \
  --package couchbase-server-enterprise-6.0.0-centos7.x86_64.rpm

To do an upgrade:

1. Execute the script providing the rpm package and the location that the previous version of Couchbase Server is
  installed at
   cb-non-package-installer --upgrade --install-location couchbase-home \
  --package couchbase-server-enterprise-6.5.0-centos7.x86_64.rpm

Copyright (c) 2020  Couchbase Inc
"""

import argparse
import logging
import re
import os
import shutil
import subprocess
import sys

from _version import __version__, __build__

FNULL = open(os.devnull, 'w')
VERSION = (7, 1)


def error(message):
    """
    Logs the error and exits
    """
    logging.error(message)
    sys.exit(1)


def get_package_version(package):
    """
    Gets the Couchbase Version from the package name
    """
    package = os.path.basename(package)

    # Only support RPM base distros
    # couchbase-server-enterprise-5.5.4-MP1-centos7.x86_64.rpm
    # couchbase-server-enterprise-6.0.1-centos8.x86_64.rpm
    regex_package_version = re.compile(r'^couchbase-server-(enterprise|community)(-|_)'
                                       r'(?P<major>\d+)\.(?P<minor>\d+)\.(?P<maintenance>\d+)'
                                       r'-[0-9a-zA-Z_\-\.]+(rpm|deb)$')
    match = regex_package_version.match(package)
    if not match:
        error(f'Could not get version from Package name {package}')
    return int(match.group('major')), int(match.group('minor')), int(match.group('maintenance'))


def get_install_version(location):
    """
    Returns the install version of Couchbase Server
    """
    version_file = os.path.join(location, 'opt/couchbase/VERSION.txt')
    with open(version_file) as version_file_handle:
        version_string = version_file_handle.readline()
        # 5.5.4-4338
        # 6.0.2-5656
        regex_install_version = re.compile(r'^(?P<major>\d+)\.(?P<minor>\d+)\.'
                                           r'(?P<maintenance>\d+)-\d+$')
        match = regex_install_version.match(version_string)
        if not match:
            error(f'Could not get version from the installed Couchbase Server: {location}')
        return int(match.group('major')), int(match.group('minor')), int(match.group('maintenance'))


def unpack(package, location, package_type):
    """
    Unpacks the rpm package
    """
    old_cwd = os.getcwd()
    package = os.path.abspath(package)
    logging.debug(f'Unpacking {package}')
    os.chdir(location)
    if package_type =='rpm':
        return_code = subprocess.call(f'rpm2cpio {package} | cpio --extract --make-directories --no-absolute-filenames',
                                      stdout=FNULL, stderr=FNULL, shell=True)
    else:
        return_code = subprocess.call(['dpkg', '-x', package, '.'])

    if return_code != 0:
        error(f'Problems unpacking {package} to {location}')
    os.chdir('opt/couchbase')
    logging.debug('Executing reloc.sh')
    return_code = subprocess.call(['./bin/install/reloc.sh', os.getcwd()])
    if return_code != 0:
        error('Problems executing reloc.sh')
    os.chdir(old_cwd)


def install(package, location, package_type):
    """
    Does a fresh non package install of Couchbase Server
    """
    logging.info('Installing Couchbase Server')
    if get_package_version(package)[:2] > VERSION:
        error(f'Can only install up to version {VERSION[0]}.{VERSION[1]}.X')
    if os.listdir(location):
        error(f'Install location "{location}" is not empty. Please provide an empty directory to install to')

    unpack(package, location, package_type)
    print('Successfully installed')


def check_upgrade_versions(package_version, install_version):
    """
    Checks the installed and the upgrade package versions
    """
    if package_version[:2] > VERSION:
        error(f'Can only upgrade up to version {VERSION[0]}.{VERSION[1]}.X')
    if package_version < install_version:
        error(f'Cannot upgrade: installed package {".".join(install_version)} is newer than {package_version}')
    if install_version < (5, 0, 0):
        error(f'Upgrade only supported between versions 5.0.0 and {VERSION[0]},{VERSION[1]}.X')


def cbupgrade(location):
    """
    Executes cbupgrade
    """
    print('Running cbupgrade - this could take some time')
    cbupgrade_cmd = os.path.join(location, 'opt/couchbase/bin/cbupgrade')
    config = os.path.join(location, 'opt/couchbase/var/lib/couchbase/config')
    return_code = subprocess.call([cbupgrade_cmd, '-a', 'yes', '--namespace_upgrade_only', '-c', config], stdout=FNULL)
    if return_code != 0:
        error('There was problem running cbupgrade')


def upgrade(package, location, package_type):
    """
    Upgrades a non package install of Couchbase Server
    """
    logging.info('Upgrading Couchbase Server')
    if not os.listdir(location):
        error(f'Upgrade location "{location}" is empty. Please provide the location where Couchbase Server is '
              'installed')

    package_version = get_package_version(package)
    install_version = get_install_version(location)
    check_upgrade_versions(package_version, install_version)

    # Check if couchbase-server is running
    # grep rc is 1 if no thing is found, 2 is used for error
    return_code = subprocess.call(r'ps auxww | grep beam | grep "\-name babysitte[r]"',
                                  shell=True, stdout=FNULL)
    if return_code == 0:
        error('Couchbase Server is running. Please shutdown before upgrading')
    elif return_code == 2:
        error('Could not check if Couchbase Server was running')

    # Backup config
    logging.info('Backing up the config')
    backup_config = 'couchbase-server-backup-config'
    backup_config = os.path.abspath(backup_config)

    if os.path.exists(backup_config):
        error(f"Server configuration backup directory '{backup_config}' already exists, please delete it before "
            "attempting to upgrade again")
    try:
        os.mkdir(backup_config)
    except OSError as e:
        error(f'Cannot create the directory {backup_config} to backup the config: {e}')

    config_paths = ['opt/couchbase/etc/couchdb/local.ini',
                    'opt/couchbase/var/lib/couchbase/config']

    # The node file is created when the server is run for the first time so adding it to the list of config files
    # that we want to backup will fail an upgrade if the upgrade is done before this initial run
    node_file_path = 'opt/couchbase/var/lib/couchbase/couchbase-server.node'
    remove_first_run_files = False
    if os.path.exists(os.path.join(location, node_file_path)):
        remove_first_run_files = True
        config_paths.append(node_file_path)

    # The ip file is only on the first node in the cluster
    files = {'opt/couchbase/var/lib/couchbase/ip': False, 'opt/couchbase/var/lib/couchbase/ip_start': False}
    for file_path in files:
        if os.path.exists(os.path.join(location, file_path)):
            files[file_path] = True
            config_paths.append(file_path)

    config_paths = [os.path.normpath(os.path.join(location, f)) for f in config_paths]

    return_code = subprocess.call(['cp', '-r'] + config_paths + [backup_config])
    if return_code != 0:
        error(f'Problem backing up config to {backup_config}')

    # TODO: Get data paths
    # Remove old couchbase files
    logging.debug('Removing the old install')
    old_install = ['opt/couchbase/bin/', 'opt/couchbase/etc/', 'opt/couchbase/lib/',
                   'opt/couchbase/LICENSE.txt', 'opt/couchbase/manifest.xml',
                   'opt/couchbase/README.txt', 'opt/couchbase/samples', 'opt/couchbase/share',
                   'opt/couchbase/VARIANT.txt', 'opt/couchbase/VERSION.txt',
                   'opt/couchbase/var/lib/couchbase/config']

    if remove_first_run_files:
        old_install.extend(['opt/couchbase/var/lib/couchbase/couchbase-server.node',
                            'opt/couchbase/var/lib/couchbase/initargs',
                            'opt/couchbase/var/lib/couchbase/isasl.pw',
                            'opt/couchbase/var/lib/couchbase/localtoken'])

    for file_path in files:
        if files[file_path]:
            old_install.append(file_path)

    old_install = [os.path.join(location, f) for f in old_install]

    return_code = subprocess.call(['rm', '-r'] + old_install)
    if return_code != 0:
        error('Problem removing the old install')

    unpack(package, location, package_type)
    # Restore config
    logging.info('Restoring the old config')
    for restore_path in config_paths:
        path_end = os.path.basename(restore_path)
        restore_config_command = f'cp -r {os.path.join(backup_config, path_end)} {restore_path}'
        return_code = subprocess.call(restore_config_command, shell=True)
        if return_code != 0:
            error('Problem restoring old config')
    # Remove backup config
    return_codec = subprocess.call(['rm', '-r', backup_config])
    if return_codec != 0:
        error(f'Could not remove the backed up config directory {backup_config}')
    if package_version[:2] == VERSION:
        cbupgrade(location)
    print('Upgrade has completed successfully')
    sys.exit(0)


def which(command):
    logging.debug(f"Checking if command '{command}' is available")
    return shutil.which(command) != None


def check_install_dependencies(package_type):
    """
    Check the dependencies needed to execute this script and "reloc.sh" are available.
    """
    if package_type == 'rpm':
        repotool = 'sudo yum'
        commands = ['rpm2cpio', 'cpio', 'rpm', 'perl', 'file']
    else:
        repotool = 'sudo apt update && sudo apt'
        commands = ['dpkg-query', 'dpkg-deb', 'dpkg', 'perl', 'file']

    missing = [c for c in commands if not which(c)]
    if len(missing) > 0:
        output = "' '".join(missing)
        error(
            f'Cannot start the install; required command(s) missing: \'{output}\'\n'
            f'Hint: try " {repotool} install -y \'{output}\' "'
        )


def check_package_dependencies(package, package_type):
    """
    Check that the dependencies of Couchbase Server are available.
    """
    if package_type == 'rpm':
        check_rpm_dependencies(package)
    else:
        check_deb_dependencies(package)


def check_rpm_dependencies(package):
    """
    Check that the dependencies of Couchbase Server are available using rpm.
    """
    rpm_output = subprocess.run(
        ['rpm', '--test', '-i', package],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        universal_newlines=True, check=False
    )
    if rpm_output.returncode == 0:
        return
    lines = rpm_output.stderr.strip()
    lines = lines.split('\n')
    if 'dependencies' in lines[0]:
        deps = [line.strip().split()[0] for line in lines[1:]]
        output = "' '".join(deps)
        error(
            f'Cannot install Couchbase Server: missing dependencies: \'{output}\'\n'
            f'Hint: try " sudo yum install \'{output}\' "'
        )
    else:
        error(f'Cannot check dependencies: {rpm_output.stderr}')


def check_deb_dependencies(package):
    """
    Check that the dependencies of Couchbase Server are available from a deb package.
    """
    # This is harder than it needs to be for deb packages. There doesn't
    # seem to be a way to ask "are this package's dependencies met", so
    # we roll our own. First get set of installed packages.
    dpkg_output = subprocess.check_output(
        ['dpkg-query', '--show', '--showformat', '${Package}\t${Version}\t${Status}\n'],
        encoding='UTF-8'
    )
    installed_pkgs = {}
    for line in dpkg_output.splitlines():
        (pkg, version, status) = line.split('\t')
        if status.split(' ')[2] != 'installed':
            continue
        installed_pkgs[pkg] = version

    # Now get list of dependencies from packagefile.
    dpkg_output = subprocess.check_output(
        ['dpkg-deb', '--show', '--showformat', '${Depends}', package],
        encoding='UTF-8'
    )

    # Iterate through list, checking to see if it's installed
    dep_re = re.compile(
        r'(?P<pkg>[^ ]+)'
        r'(?: \((?P<comp>[^ ]+) (?P<ver>.*)\))?'
    )
    missing_or_old = []
    for dep_decl in dpkg_output.split(', '):
        (pkg, comp, version) = dep_re.match(dep_decl).groups()
        # If it's not installed at all, that's bad
        if pkg not in installed_pkgs:
            missing_or_old.append(pkg)
            continue
        # If it's installed and we don't have a version to compare to,
        # that's good
        if comp is None:
            continue
        # Call out to dpkg to compare versions
        comp_ver = subprocess.run(
            ['dpkg', '--compare-versions', installed_pkgs[pkg], comp, version]
        )
        if comp_ver.returncode != 0:
            missing_or_old.append(pkg)

    # Output results, if bad
    if len(missing_or_old) > 0:
        output = "' '".join(missing_or_old)
        error(
            f'Cannot install Couchbase Server: missing or outdated dependencies: \'{output}\'\n'
            f'Hint: try " sudo apt update && sudo apt install \'{output}\' "'
        )

def main():
    """
    Validates the arguments and start the install or upgrade process
    """

    # PyInstaller binaries get LD_LIBRARY_PATH set for them, and that can have
    # unwanted side-effects for our own subprocesses. Remove that here. This
    # needs to be done very early.
    os.environ.pop("LD_LIBRARY_PATH", None)

    opts = argparse.ArgumentParser(description='A tool to help install and upgrade Couchbase Server'
                                               ' in non root environments.')

    action_group = opts.add_mutually_exclusive_group(required=True)
    action_group.add_argument('--install', action='store_true',
                              help='To do a fresh install of Couchbase Server')
    action_group.add_argument('--upgrade', action='store_true',
                              help='To upgrade an existing install of Couchbase Server')
    opts.add_argument('--install-location', type=str, metavar='Path', dest='location',
                      required=True, help='Path where Couchbase Server should be installed')
    opts.add_argument('--package', type=str, metavar='File', dest='package', required=True,
                      help='The Couchbase Server package (rpm/deb) to install')
    opts.add_argument('--no-check-deps', action='store_true',
                      help="Don't verify system dependencies (use at own risk)")
    opts.add_argument('-v', '--verbose', action='count', help='increase output verbosity')
    opts.add_argument('-V', '--version', action='version', help='Display version',
                      version=f"cb-non-package-installer version {__version__} (build {__build__})")
    args = opts.parse_args()

    # Set up logging
    log_level = None
    if args.verbose is None:
        log_level = logging.WARN
    elif args.verbose >= 2:
        log_level = logging.DEBUG
    elif args.verbose == 1:
        log_level = logging.INFO

    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                        datefmt='%Y/%m/%dT%H:%M:%S', level=log_level)

    if not os.path.isfile(args.package):
        error(f'Package "{args.package}" does not exist or is not a file')
    if not os.access(args.package, os.R_OK):
        error(f'Package "{args.package}" is not readable, please check the permissions')
    if not os.path.isdir(args.location):
        error(f'Install location "{args.location}" does not exist or is not a directory')
    if not os.access(args.location, os.W_OK):
        error(f'Install location "{args.location}" is not writable, please check the permissions')

    package_type = args.package.split('.')[-1]
    if package_type not in ['rpm', 'deb']:
        error(f'Package "{args.package}" not supported')

    if args.no_check_deps:
        logging.warn(
            "NOT checking that package dependencies are installed on system - "
            "installation may be broken"
        )
    else:
        check_install_dependencies(package_type)
        check_package_dependencies(args.package, package_type)

    if args.install:
        install(args.package, args.location, package_type)
    if args.upgrade:
        upgrade(args.package, args.location, package_type)
    sys.exit(0)


if __name__ == '__main__':
    main()
